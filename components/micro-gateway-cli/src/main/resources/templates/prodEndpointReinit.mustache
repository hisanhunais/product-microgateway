key = gateway:retrieveConfig(keyConfigValue, "");
                    if (key != "" && connectionEstablished) {
                        hasUrlChanged = <boolean>urlChanged[key];
                        match hasUrlChanged {
                            boolean matchUrlChanged => reinitRequired = matchUrlChanged;
                            error err => log:printError("Error in checking for Re-initialization", err = err);
                        }
                        if (reinitRequired) {
                            newConfig = { url : <string>urls[key] };
                            destination_attribute = <string>urls[key];
                            try {
                                {{qualifiedServiceName}}_Production.init(newConfig);
                                urlChanged[key] = false;
                            } catch (error err) {
                                reinitFailed = true;
                                urlChanged[key] = true;

                                http:Response res = new;
                                res.statusCode = 500;
                                json payload = {
                                    "fault": {
                                        "code": "101503",
                                        "message": "Runtime Error",
                                        "description": "Error connecting to the back end"
                                    }
                                };

                                runtime:getInvocationContext().attributes["error_code"] = "101503";
                                res.setPayload(payload);
                                clientResponse = res;
                                log:printError("URL defined at " + serviceDiscoveryTool + " for key " + config:getAsString(keyConfigValue) + " is invalid");
                            }
                        }
                    }

                    if (!reinitFailed) {
                        clientResponse = {{qualifiedServiceName}}_Production->forward(urlPostfix, req);
                        runtime:getInvocationContext().attributes["destination"] = destination_attribute;
                    }