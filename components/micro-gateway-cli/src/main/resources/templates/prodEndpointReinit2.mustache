//consulKeyConfigValue = apiId + "_prod_consulKey";
key = gateway:retrieveConfig(keyConfigValue, "");
if(key != "" && connectionEstablished){
hasUrlChanged = <boolean>urlChanged[key];
    match hasUrlChanged{
    boolean matchUrlChanged => reinitRequired = matchUrlChanged;
    error err => log:printError("Error in checking for Re-initialization", err = err);
    }
    if(reinitRequired){
    newConfig = {url:<string>urls[key]};
        destination_attribute = <string>urls[key];
            try{
            {{qualifiedServiceName}}_prod.init(newConfig);
            urlChanged[key] = false;
            }catch(error err){
            reinitFailed = true;
            urlChanged[key] = true;

            http:Response res = new;
            res.statusCode = 500;
            json payload = {
            "fault": {
            "code": "101505",
            "message": "Runtime Error",
            "description": "URL defined for key " + config:getAsString(keyConfigValue) + " is invalid"
            }
            };
            runtime:getInvocationContext().attributes["error_code"] = "101505";
            res.setPayload(payload);
            clientResponse = res;
            log:printError("URL defined for key " + config:getAsString(keyConfigValue) + " is invalid");
            }
            }
            }

            if(!reinitFailed){
            clientResponse = {{qualifiedServiceName}}_prod->forward(urlPostfix, req);
            runtime:getInvocationContext().attributes["destination"] = destination_attribute;
            }