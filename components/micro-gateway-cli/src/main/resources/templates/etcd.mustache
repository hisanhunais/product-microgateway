import ballerina/log;
import ballerina/http;
import ballerina/config;
import ballerina/time;

{{#if containerConfig.hasKubernetes}}import ballerinax/kubernetes;{{/if}}

import wso2/gateway;

{{#if endpointConfig.0}}
    {{#equals endpointConfig.0.inline.endpointConfig.endpointType "SINGLE"}}
        {{#endpointConfig.0}}{{>httpEndpoint}}{{/endpointConfig.0}}
    {{/equals}}
    {{#equals endpointConfig.0.inline.endpointConfig.endpointType "LOAD_BALANCED"}}
        {{#endpointConfig.0}}{{>lbEndpoint}}{{/endpointConfig.0}}
    {{/equals}}
    {{#equals endpointConfig.0.inline.endpointConfig.endpointType "FAIL_OVER"}}
        {{#endpointConfig.0}}{{>failoverEndpoint}}{{/endpointConfig.0}}
    {{/equals}}
{{/if}}
{{#if endpointConfig.1}}
    {{#equals endpointConfig.1.inline.endpointConfig.endpointType "SINGLE"}}
        {{#endpointConfig.1}}{{>httpEndpoint}}{{/endpointConfig.1}}
    {{/equals}}
    {{#equals endpointConfig.1.inline.endpointConfig.endpointType "LOAD_BALANCED"}}
        {{#endpointConfig.1}}{{>lbEndpoint}}{{/endpointConfig.1}}
    {{/equals}}
    {{#equals endpointConfig.1.inline.endpointConfig.endpointType "FAIL_OVER"}}
        {{#endpointConfig.1}}{{>failoverEndpoint}}{{/endpointConfig.1}}
    {{/equals}}
{{/if}}

{{>kubernetes}}


@http:ServiceConfig {
basePath: "{{api.context}}{{#unless api.isDefaultVersion}}/{{api.version}}{{/unless}}",{{!-- {{only one base path is allowed for all  endpoints}} --}}
authConfig:{
authProviders:["oauth2"]
}{{#api.corsConfiguration.corsConfigurationEnabled}},
cors: {
allowOrigins: [{{#api.corsConfiguration.accessControlAllowOrigins}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.corsConfiguration.accessControlAllowOrigins}}],
allowCredentials: {{api.corsConfiguration.accessControlAllowCredentials}},
allowHeaders: [{{#api.corsConfiguration.accessControlAllowHeaders}}"{{.}}"{{#unless @last}},{{/unless}}{{/api.corsConfiguration.accessControlAllowHeaders}}]
}
{{/api.corsConfiguration.corsConfigurationEnabled}}
}

@gateway:API {
publisher:"{{api.provider}}",
name:"{{api.name}}",
apiVersion: "{{api.version}}" {{#if api.authorizationHeader}},
authorizationHeader : "{{api.authorizationHeader}}" {{/if}}
}
service<http:Service> {{cut qualifiedServiceName " "}} bind {{#api.transport}}{{#equals . "http"}}apiListener{{#unless @last}},{{/unless}}{{/equals}}{{#equals . "https"}}apiSecureListener{{/equals}}{{/api.transport}} {
    {{#paths}}{{#value}}{{#operations}}{{#value}}

        @http:ResourceConfig {
        methods:["{{upper key}}"],
        path:"{{../../key}}",
        authConfig:{
        authProviders:["oauth2"] {{#unless isSecured}},
        authentication:{enabled:false} {{/unless}} {{#if scope}},
        scopes: ["{{scope}}"] {{/if}}

        }
        }
        @gateway:RateLimit{policy : "{{resourceTier}}"}
        {{operationId}} (endpoint outboundEp, http:Request req) {
        gateway:checkExpectHeaderPresent(req);
        {{#if api.isDefaultVersion}}
            string urlPostfix = untaint req.rawPath.replace("{{api.context}}","");
        {{else}}
            string urlPostfix = untaint req.rawPath.replace("{{api.context}}/{{api.version}}","");
        {{/if}}
        http:Response|error clientResponse;
        runtime:getInvocationContext().attributes["timeStampRequestOut"] = time:currentTime().time;
        {{#equals etcd.etcdEnabled "true"}}boolean reinitRequired;
            string etcdKey;
            boolean|error hasUrlChanged;
            http:ClientEndpointConfig newConfig;{{/equals}}
        {{#endpointConfig.0}}
            if("PRODUCTION" == runtime:getInvocationContext().attributes["KEY_TYPE"]) {
            {{#equals etcd.etcdEnabled "true"}}
                etcdKey = gateway:retrieveConfig("{{api.name}}.{{api.version}}.Production.etcd.key", "");
                if(etcdKey != "" && gateway:etcdConnectionEstablished)
                {
                hasUrlChanged = <boolean>gateway:urlChanged[etcdKey];
                match hasUrlChanged{
                boolean matchUrlChanged => reinitRequired=matchUrlChanged;
                error err => io:println("error: " + err.message);
                }
                if(reinitRequired)
                {
                io:println("Re-initializing the endpoint");
                newConfig = {url:<string>gateway:etcdUrls[etcdKey]};
                gateway:urlChanged[etcdKey] = false;
                {{qualifiedServiceName}}_Production.init(newConfig);
                }
                }
            {{/equals}}
            clientResponse = {{qualifiedServiceName}}_Production->forward(urlPostfix, req);
            runtime:getInvocationContext().attributes["destination"] = "{{inline.endpointConfig.list.0.url}}";
            }
        {{/endpointConfig.0}}
        {{#endpointConfig.1}}
            else {
            {{#equals etcd.etcdEnabled "true"}}
                etcdKey = gateway:retrieveConfig("{{api.name}}.{{api.version}}.Sandbox.etcd.key", "");
                if(etcdKey != "" && gateway:etcdConnectionEstablished)
                {
                hasUrlChanged = <boolean>gateway:urlChanged[etcdKey];
                match hasUrlChanged{
                boolean matchUrlChanged => reinitRequired=matchUrlChanged;
                error err => io:println("error: " + err.message);
                }
                if(reinitRequired)
                {
                io:println("Re-initializing the endpoint");
                newConfig = {url:<string>gateway:etcdUrls[etcdKey]};
                gateway:urlChanged[etcdKey] = false;
                {{qualifiedServiceName}}_Sandbox.init(newConfig);
                }
                }
            {{/equals}}
            clientResponse = {{qualifiedServiceName}}_Sandbox->forward(urlPostfix, req);
            runtime:getInvocationContext().attributes["destination"] = "{{inline.endpointConfig.list.0.url}}";
            }
        {{/endpointConfig.1}}
        runtime:getInvocationContext().attributes["timeStampResponseIn"] = time:currentTime().time;

        match clientResponse {

        http:Response res => {
        outboundEp->respond(res) but { error e =>
        log:printError("Error when sending response", err = e) };
        }

        error err => {
        http:Response res = new;
        res.statusCode = 500;
        string errorMessage = err.message;
        int errorCode = 101503;
        string errorDescription = "Error connecting to the back end";

        if(errorMessage.contains("connection timed out") || errorMessage.contains("Idle timeout triggered")) {
        errorCode = 101504;
        errorDescription = "Connection timed out";
        }
        runtime:getInvocationContext().attributes["error_response"] = err;
        runtime:getInvocationContext().attributes["error_response_code"] = errorCode;
        json payload = {fault : {
        code : errorCode,
        message : "Runtime Error",
        description : errorDescription
        }};
        res.setPayload(payload);
        log:printError("Error in client response", err = err);
        outboundEp->respond(res) but { error e =>
        log:printError("Error when sending response", err = e) };
        }
        }
        }
    {{/value}}{{/operations}}{{/value}}{{/paths}}
    }