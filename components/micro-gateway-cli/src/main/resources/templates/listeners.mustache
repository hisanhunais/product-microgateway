import wso2/gateway;
import ballerina/http;
import ballerina/log;

{{#if containerConfig.hasDocker}}import ballerinax/docker;{{/if}}
{{#if containerConfig.kubernetes.kubernetesService.enable}}import ballerinax/kubernetes;{{/if}}

//Throttle tier data initiation

{{#if config.mutualSSL.certificateDetails}}
    json ClientCerts ={{{config.mutualSSL.certificateDetails}}};
{{else}}
    json ClientCerts=null;
{{/if}}



//Get mutualSSL filter
gateway: MutualSSLFilter  mtslFilter= new(ClientCerts);
// Get authentication filter
gateway:AuthnFilter authnFilter = new();
// Subscription validation filter
// Authorization filter
gateway:OAuthzFilter authorizationFilter = gateway:getDefaultAuthorizationFilter();
gateway:SubscriptionFilter subscriptionFilter = new;
// Get deployed policies
map deployedPolicies = getDeployedPolicies();
// Throttling filter
gateway:ThrottleFilter throttleFilter = new(deployedPolicies);
// Analytics filter
gateway:AnalyticsRequestFilter analyticsFilter = new();
// Extension filter
ExtensionFilter extensionFilter;

{{>docker}}
{{>secureKubernetesIngress}}
{{>kubernetesService}}
endpoint gateway:APIGatewaySecureListener apiSecureListener {
    port:9095{{>http2}},
    {{>mutualSSL}}
    filters:[ mtslFilter, authnFilter, authorizationFilter, subscriptionFilter, throttleFilter,
    analyticsFilter, extensionFilter]
};

{{>kubernetesIngress}}
{{>kubernetesService}}
endpoint gateway:APIGatewayListener apiListener {
    port:9090{{>http2}},
    filters:[  authnFilter, authorizationFilter, subscriptionFilter, throttleFilter, analyticsFilter, extensionFilter]
};

